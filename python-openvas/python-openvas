#!/usr/bin/env python

"""
    python-openvas
    ================

    This program interact with openvassd (openvas-scanner) to scan an host.
    It features:
    *email report sent to local smtp server
    *json output sent to local flume server
    *IPv4/IPv6 scans

    Common use:
    -----------
    Run the default scan and receive the report by email by launching:
    python-openvas -v -t 8.8.8.8 -e john@example.com

    Example:
    --------
    python-openvas -v -t 8.8.8.8 -f General, Malware -e john@example.com
    python-openvas -v -t 8.8.8.8 -j -a

    Advices:
    --------
    Please make sure flume channel capacity are big enough to send a big json
    in case there are lot of vulnerabilities.

    main module:
    ------------
    This aims at parsing the CLI args, and runing the different functions.

"""

VERSION = '1.0'
DEFAULT_FAMILY = ['Finger abuses', 'Malware', 'Windows : Microsoft Bulletins', 'Netware', 'Default Accounts', 'Buffer overflow', 'Policy', 'Useless services', 'Product detection', 'Denial of Service', 'SSL and TLS', 'Gain a shell remotely', 'Web application abuses', 'Service detection', 'RPC', 'Brute force attacks', 'FTP', 'Compliance', 'Settings', 'Windows', 'Nmap NSE', 'Databases', 'Firewalls', 'Credentials', 'IT-Grundschutz', 'SMTP problems', 'Nmap NSE net', 'CISCO', 'Remote file access', 'SNMP', 'Web Servers', 'General', 'Peer-To-Peer File Sharing', 'Privilege escalation', 'Port scanners', 'IT-Grundschutz-12', 'IT-Grundschutz-13', 'IT-Grundschutz-10', 'IT-Grundschutz-11']

import sys, signal, re, socket, argparse #General module
import sendformat, iptool, otp, color, blacklisttools, oid #Personnal class

argv=sys.argv[1:] #put the arguments in a string
parser = argparse.ArgumentParser(description="openvas-handler menu")
parser.add_argument('-a', '--all', help='Scan all the families', action='store_true')
parser.add_argument('-f', '--scan-families', metavar="family1, family2", type=str, nargs='?', dest='family', help="Specify families for the families for the scan.", default= DEFAULT_FAMILY )
parser.add_argument('-t', '--target', metavar='8.8.8.8 example', type=str ,dest='target', nargs=1, help="IP or domain name of the host to scan")
parser.add_argument('-j', '--json', help='Output the report in JSON', action='store_true')
parser.add_argument('--flume-server', metavar='http://localhost:5140/post', help='Specify flume server adress', nargs=1, type=str,default='http://localhost:5140/post', dest='flume_server')
parser.add_argument('-l', '--list-families', help="List the families available (ex: Windows, Linux, Cisco, etc)", action='store_true')
parser.add_argument('-e', '--email', metavar="x1@example.com, x2@example.com", type=str, nargs="+", help="Send the report to someone@example.com by email", dest="email")
parser.add_argument('--from', metavar="x1@example.com", type=str, nargs=1, help="Define the sender of the email report", dest="email_from", default="openvas@cern.ch")
parser.add_argument('--subject', metavar="Openvas Report", type=str, nargs=1, help="Define the subject of the email. Default is Openvas Report", dest="email_subject", default="Openvas Report")
parser.add_argument('--no-file', help="No Report file is output", dest="outputFile", action='store_false', default=True)
parser.add_argument('-o', '--output-directory', metavar="/opt/openvas/reports (default)", type=str, nargs=1, help="Write the report on the machine directory..", dest="outputDirPath", default='/opt/openvas/reports')
parser.add_argument('-s', '--socket-path', metavar="/var/run/openvassd.sock (default)", type=str, nargs=1, help="Define OpenVAS scanner socket path...", dest="unixsocket_path", default='/var/run/openvassd.sock')
parser.add_argument('-v', '--verbose', help="Verbose mode. Output the OTP info in the shell.", dest="verbose",default=False,action='store_true')
parser.add_argument('--oid-timeout', type=int, nargs=1, help="Set a timeout for the retrieval of oid. Default is 3s.", dest="oid_timeout",default=3)
parser.add_argument('--version', action='version', version='%(prog)s {}'.format(VERSION))
parser.add_argument('--blacklist-info', help="Print information about blacklisted oid", dest="blacklist_info", action='store_true')
#parser.add_argument('--blacklist-ignore', help="Ignore blacklisted oid from blacklsit.conf", dest="blacklist_ignore", action='store_true')
parser.add_argument('--blacklist-add',metavar='1.3.6.1.4.1.25623.1.0.80110', nargs="+", help="Add the oid to blacklist.conf", dest="blacklist_add")
parser.add_argument('--blacklist-remove',metavar='1.3.6.1.4.1.25623.1.0.80110', nargs="+", help="Remove the oid from blacklist.conf", dest="blacklist_remove")

args = parser.parse_args()

if args.blacklist_remove:
    blacklist = blacklisttools.BlacklistTools()
    blacklist.RemoveOid(args.blacklist_remove)
    sys.exit(0)
elif args.blacklist_add:
    blacklist = blacklisttools.BlacklistTools()
    blacklist.AddOid(args.blacklist_add)
    sys.exit(0)

otp = otp.OTP(args.oid_timeout, args.unixsocket_path)
familyDict = otp.ListFamilies()
oidObj = oid.Oid(familyDict)

if args.target:
    isIp = iptool.IPTool(args.target[0])#test if correct ip.
    ipTarget = isIp.ValidDNIP()
    print(color.BLUE + "Don't forget to deactivate the target firewall !" + color.END)
    oidObj = oid.Oid(familyDict)
    oidList = oidObj.familyToScan(args.all,args.family)
    jsonOutput = otp.RunScan(ipTarget,args.verbose,oidList, familyDict)
    otp.sock.Close()
    sendFormatObj = sendformat.SendFormat(jsonOutput)
    if args.json:
	sendFormatObj.SendFlume(args.flume_server)
    if args.email:
	sendFormatObj.SetHeaders(args.email_subject,args.email_from,args.email)
        sendFormatObj.SendEmail(args.email_from,args.email)
    if args.outputFile:
	sendFormatObj.WriteFile(args.outputDirPath)
elif args.blacklist_info:
    oidObj.blacklistInfo()
elif args.list_families:
    print(familyDict.keys())
else:
    print(color.RED + "Arguments missing !" + color.END)
otp.sock.Close()
